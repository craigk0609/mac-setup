#! /usr/bin/env bash

source lib/installers.sh
source lib/utilities.sh
source lib/verifiers.sh

# SET Environment Variables
export DOCKER_APP_NAME="Docker.app"
export DOCKER_VOLUME_NAME="Docker"
export DOCKER_APP_URL="https://download.docker.com/mac/stable/Docker.dmg"

export SONOS_APP_NAME="Sonos S1 Controller.app"
export SONOS_VOLUME_NAME="Sonos"
export SONOS_APP_URL="https://www.sonos.com/redir/controller_software_mac"

export MAC_OS_WORK_PATH=/tmp/downloads

# Installs applications.
printf "%s\n" "Checking for install of $DOCKER_APP_NAME..."
install_dmg_app "$DOCKER_APP_URL" "$DOCKER_VOLUME_NAME" "$DOCKER_APP_NAME"

printf "%s\n" "Checking for install of $SONOS_APP_NAME..."
install_dmg_app "$SONOS_APP_URL" "$SONOS_VOLUME_NAME" "$SONOS_APP_NAME"

printf "%s\n" "Checking for ssh keys..."
if [[ ! -f $HOME/.ssh/id_rsa ]]; then
    # Create an SSH key
    read -p "Email address for git credentials: " user_email
    if [[ -z "$user_email" ]]; then
        printf "ERROR: Invalid user email address.\n"
        exit 1
    fi

    ssh-keygen -t rsa -b 4096 -C $user_email

    printf "%s\n" "$HOME/.ssh/id_rsa generated. Ensure you upload to azure devops/github for access."
fi

# Install Homebrew if it is not already installed
command -v brew >/dev/null 2>&1 || { echo >&2 "Installing Homebrew Now"; \
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; }

printf "%s\n" "Updating Homebrew Formulae"
brew update

printf "%s\n" "Upgrading Existing Homebrew Formulae"
brew upgrade

printf "%s\n" "Installing Homebrew Formulae..."
###### Homebrew ######
brew install mas

###### Homebrew Cask ######
printf "%s\n" "Installing Homebrew Casks..."
brew install --cask microsoft-auto-update
brew install --cask microsoft-word
brew install --cask microsoft-excel
brew install --cask microsoft-outlook
brew install --cask microsoft-powerpoint
brew install --cask microsoft-teams
brew install --cask visual-studio-code

brew install --cask zoom
brew install --cask signal
brew install --cask azure-data-studio
brew install --cask macpass
brew install --cask vmware-horizon-client
brew install --cask postman
brew install --cask studio-3t
# The cask for Studio3T is older, but the internal update will fire and update the app

brew install --cask slack
brew install --cask evernote
brew install --cask 1password

printf "%s\n" "Installing App Store Apps"
# Grammarly for Safari
mas install 1462114288
# Magnet
mas install 441258766
# Affinity Photo
mas install 881418622
# Affinity Publisher
mas install 824183456
# Greenshot
mas install 1103915944
# F5Access
mas install 1243219105
# Pixelmator Classic
mas install 407963104

###### Settings Updates ######
printf "%s\n" "System - Expand save panel by default."
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

printf "%s\n" "System - Disable smart quotes (not useful when writing code)."
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

printf "%s\n" "System - Disable smart dashes (not useful when writing code)."
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

printf "%s\n" "System - Require password immediately after sleep or screen saver begins."
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

printf "%s\n" "System - Automatically restart if system freezes."
systemsetup -setrestartfreeze on

printf "%s\n" "Trackpad - Enable tap to click for current user and the login screen."
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

printf "%s\n" "Trackpad - Use CONTROL (^) with scroll to zoom."
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144

printf "%s\n" "Trackpad - Follow keyboard focus while zoomed in."
defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

printf "%s\n" "Dock - Remove all default app icons."
defaults write com.apple.dock persistent-apps -array

printf "%s\n" "Safari - Set home page to 'about:blank' for faster loading."
defaults write com.apple.Safari HomePage -string "about:blank"

printf "%s\n" "Safari - Hide bookmarks bar."
defaults write com.apple.Safari ShowFavoritesBar -bool false

printf "%s\n" "Safari - Use Contains instead of Starts With in search banners."
defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

printf "%s\n" "Finder - Show hidden files."
defaults write com.apple.finder AppleShowAllFiles -bool true

printf "%s\n" "Finder - Show filename extensions."
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

printf "%s\n" "Finder - Show path bar."
defaults write com.apple.finder ShowPathbar -bool true

printf "%s\n" "Finder - Show status bar."
defaults write com.apple.finder ShowStatusBar -bool true

printf "%s\n" "Finder - Allow text selection in Quick Look."
defaults write com.apple.finder QLEnableTextSelection -bool true

printf "%s\n" "Safari - Enable the Develop menu and the Web Inspector."
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

printf "%s\n" "TextEdit - Use plain text mode for new documents."
defaults write com.apple.TextEdit RichText -int 0

printf "%s\n" "Printer - Automatically quit printer app once the print jobs complete."
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

printf "%s\n" "Game Center - Disable Game Center."
defaults write com.apple.gamed Disabled -bool true